
#AMBIENTE ANGULAR

baixar e instalar o node => nodejs.org
> node --version => apresenta a versao do node instalada

//com o node é instalado o NPM - gerenciado de dependencias
//https://www.npmjs.com/ => repositorio
> npm --version => apresenta a versao instalada do NPM

> npm install -g typescript => instala o typescript
> tsc -v => apresenta a versao do typescript instalada

//O Angular CLI é uma ferramenta open source e é utilizado para facilitar a criação de componentes, classes, services e outros.
> npm install -g @angular/cli => instala o Angular CLI
> ng --version => apresenta a versao do angular CLI instalado


#PRIMEIRO PROJETO
> ng new primeiro-projeto => cria estrutura do projeto mais suas dependencias
> cd primeiro-projeto => muda para o diretorio do projeto criado
> ng serve => faz o build do projeto e inicializa a aplicacao na porta localhost:4200

*****************************************************
VERSAO DO ANGULAR: 8x
"dependencies": {
    "@angular/animations": "~8.2.3",
    "@angular/common": "~8.2.3",
    "@angular/compiler": "~8.2.3",
    "@angular/core": "~8.2.3",
    "@angular/forms": "~8.2.3",
    "@angular/platform-browser": "~8.2.3",
    "@angular/platform-browser-dynamic": "~8.2.3",
    "@angular/router": "~8.2.3",
    "rxjs": "~6.4.0",
    "tslib": "^1.10.0",
    "zone.js": "~0.9.1"
  },
*****************************************************

------------------------------------------
#Criando componente Manualmente
meu-primeiro-componente
(nota: criar sem usar o CLI)
------------------------------------------
Abrir o projeto no VSCode
Criar uma pasta meu-primeiro
Criar um arquivo meu-primeiro-component.ts na pasta
Definir uma classse com: class MeuPrimeiroComponente{}
Adicionar o decorator: @Component({})
Adicionar o import do decorator: import { Component } from '@angular/core';
Adicionar metadados ao decorator (essenciais): select e template
- exemplo:
	@Component({
	    selector: 'meu-primeiro-component',
	    template: `
 	       <p> Meu primeiro componente com Angular 8! </p>
 	   `
	})
Expor a classe para outros arquivos com export class MeuPrimeiroComponent{}
Declarar o component no modulo, na sessao Declarations do arquivo app.module.ts 
- exemplo:
	@NgModule({
  		declarations: [
  	 	 AppComponent,
  	 	 MeuPrimeiroComponente
  		],
	...
	})
Realizar o import do component para que o mesmo seja localizado pelo app.module.ts
na sessao de imports:
import { MeuPrimeiroComponente } from './meu-primeiro/meu-primeiro.component'; 
Utilizar o seletor criado no arquivo app.component.html:
- exemplo
	<meu-primeiro-component></meu-primeiro-component>



------------------------------------------
#Criando componente Automaticamente com CLI 
meu-primeiro2
------------------------------------------

> ng generate component meu-primeiro2
ou
> ng g c meu-primeiro2


*****************************************************
VERSIONANDO: GIT E GITHUB
=>Repositorio remoto no GITHUB:

…or push an existing repository from the command line
git remote add origin git@github.com:deyg/angular-serie-loiane.git
git push -u origin master
*****************************************************

------------------------------------------
#5 - Modulo
------------------------------------------
> ng g module «nome-do-modulo»
> ng g module cursos ou ng m cursos
> [ CREATE src/app/cursos/cursos.module.ts (192 bytes) ]
ob-01 - O modulo de bootstrap so existe no modulo raiz
ob-02 - O modulo de funcionalidade nao importa BrowserModule
@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
contudo importa o CommonModule

//Criar componente no modulo Cursos
> ng g c cursos
--------------------------------------------------------------------------------
PS C:\@cursos\_git-repositorios\loiane\angular-serie-loiane> ng g c cursos
CREATE src/app/cursos/cursos.component.html (21 bytes)
CREATE src/app/cursos/cursos.component.spec.ts (628 bytes)
CREATE src/app/cursos/cursos.component.ts (269 bytes)
CREATE src/app/cursos/cursos.component.css (0 bytes)
UPDATE src/app/cursos/cursos.module.ts (261 bytes)
--------------------------------------------------------------------------------


//Apos adicionar o componente cursos no componente raiz a aplicacao
gerou erro: 
--------------------------------------------------------------------------------
Uncaught Error: Template parse errors:
'app-cursos' is not a known element:
1. 
If 'app-cursos' is an Angular component, then verify that it is part of this module.
2. 
If 'app-cursos' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the 
'@NgModule.schemas' of this component to suppress this message. 
("
 <app-meu-primeiro2></app-meu-primeiro2>...")

... entao app.module.ts deve conhecer o modulo assim:
 imports: [
    BrowserModule,
    CursosModule
  ],
--------------------------------------------------------------------------------

//Outro componente no modulo cursos
--------------------------------------------------------------------------------
PS C:\@cursos\_git-repositorios\loiane\angular-serie-loiane> ng g c cursos/curso-detalhe
CREATE src/app/cursos/curso-detalhe/curso-detalhe.component.html (28 bytes)
CREATE src/app/cursos/curso-detalhe/curso-detalhe.component.spec.ts (671 bytes)
CREATE src/app/cursos/curso-detalhe/curso-detalhe.component.ts (296 bytes)
CREATE src/app/cursos/curso-detalhe/curso-detalhe.component.css (0 bytes)
UPDATE src/app/cursos/cursos.module.ts (416 bytes)
--------------------------------------------------------------------------------
Para manter um componente restrito (privado) a um modulo basta nao exporta-lo.
Ex. O componente curso acessar curso-detalhe, mas o componente app nao, pois 
curso-detalhe não foi exportado.



------------------------------------------
#6 - Templates
------------------------------------------
Trabalhando com os arquivos:
- cursos.component.html (TEMPLATE)
- cursos.component.ts (COMPONENTE)

Entendendo e implementado o conceito de 
WEB COMPONENTS: utilizando interpolacao {{nome_variavel}}
para integrar .ts e .html (template e comportamento)
[ "fazer comparacao com code behind de asp.net" ]

Utilizando a diretiva *ngFor para
renderizacao dinamica de conteudo.
(O poder dos templates)
<ul>
    <li *ngFor="let curso of cursos">
        {{ curso }}
    </li>
</ul>

******************************
unificando repositorio
git checkout b templates
//commit no branch templates
//publicar branch templates no github
git checkout master
git rebase templates
//publicar no github
******************************




















